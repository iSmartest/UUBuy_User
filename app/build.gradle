apply plugin: 'com.android.application'
buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        //noinspection GradleDynamicVersion,GradlePluginVersion
        classpath 'com.android.tools.build:gradle:0.12.+'//修改此处版本号为 0.5.0
    }
}
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    //默认版本号和版本名
    def DEF_VERSION_CODE = 3
    def DEF_VERSION_NAME = "2.0.1"
    //正式环境
    def API_RELEASE_HOST = "\"http://www.uugood.cn:8080/uugo-user/app/\""
    //开发环境
    def API_DEV_HOST = "\"http://192.168.1.100:8080/uugo-user/app/\""
    //测试环境
    def API_TEST_HOST = "\"http://192.168.1.19:8080/uugo-user/app/\""

    defaultConfig {
        applicationId "com.ifree.uu.uubuy"
        minSdkVersion 15
        targetSdkVersion 28
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"
        //动态指定版本号版本名
        versionCode project.hasProperty('VERSION_CODE') ? Integer.parseInt(VERSION_CODE) : DEF_VERSION_CODE
        versionName project.hasProperty('VERSION_NAME') ? VERSION_NAME : "${DEF_VERSION_NAME}"
        println("versionCode = " + versionCode + " versionName = " + versionName)
        buildConfigField("String", "API_HOST", "${API_RELEASE_HOST}")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        release {//发布版本的签名配置
            storeFile file(project.KEY_PATH)   //文件位置
            storePassword project.KEY_PASS  //指定密码
            keyAlias project.ALIAS_NAME  //指定别名
            keyPassword project.ALIAS_PASS  //指定别名密码
        }

        debug {//调试版本的签名配置
            storeFile file(project.DEBUG_KEYSTORE)
            keyAlias project.DEBUG_ALIAS
            storePassword project.DEBUG_KEYSTORE_PWD
            keyPassword project.DEBUG_KEY_PWD
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "API_HOST", "${API_DEV_HOST}"
            zipAlignEnabled true // Zipalign优化
            // 加载默认混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug // 签名
            applicationIdSuffix '.debug'
            manifestPlaceholders = [GAODE_MAP_KEY: "d3c2a6773abc50be4c160a606e7aa4e3"]
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"// 不显示Log
            buildConfigField "String", "API_HOST", "${API_RELEASE_HOST}"
            minifyEnabled true // 混淆
            zipAlignEnabled true// ZipAlign优化
            shrinkResources true// 移除无用的resource文件，前提minifyEnabled必须打开
            //加载默认混淆配置涵
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [GAODE_MAP_KEY: "56e3207aaf3e6e583178b1170f9e2f4c"]
        }

        dev { // 开发环境
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "API_HOST", "${API_DEV_HOST}"
            minifyEnabled false
            //加载默认混淆配置涵
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [GAODE_MAP_KEY: "56e3207aaf3e6e583178b1170f9e2f4c"]
        }
    }

    flavorDimensions "default"//这个名字便取，也可以有多个，总之一定要有
    //多渠道打包
    //修改生成的最终文件名
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName
                if (!project.hasProperty('FILE_NAME')) {
                    if (variant.buildType.name == "release") {
                        // 输出apk名称为app_v1.0.0_2015-06-15_playStore.apk  _${variant.productFlavors[0].name}
                        fileName = "uubuy_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
                    } else if (variant.buildType.name == "debug") {
                        fileName = "uubuy_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
                    } else if (variant.buildType.name == "dev") {
                        fileName = "uubuy_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
                    }
                } else {
                    fileName = FILE_NAME
                }
                outputFileName = fileName
            }
        }
    }

    flavorDimensions "default"//这个名字便取，也可以有多个，总之一定要有

    //多渠道打包
//修改生成的最终文件名
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName
                if (!project.hasProperty('FILE_NAME')) {
                    if (variant.buildType.name == "release") {
                        // 输出apk名称为app_v1.0.0_2015-06-15_playStore.apk  _${variant.productFlavors[0].name}
                        fileName = "uubuy_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
                    } else if (variant.buildType.name == "debug") {
                        fileName = "uubuy_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
                    } else if (variant.buildType.name == "dev") {
                        fileName = "uubuy_v${defaultConfig.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
                    }
                } else {
                    fileName = FILE_NAME
                }
                outputFileName = fileName
            }
        }
    }

    //配置多版本的apk
    productFlavors {
        baidu {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "BaiDu"]
            dimension "default"
        }   //百度
        yingyongbao {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "YingYongBao"]
            dimension "default"
        }  //应用宝
        huawei {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "HuaWei"]
            dimension "default"
        }  //华为
        qihu360 {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "Qihu360"]
            dimension "default"
        }  //360
        oppo {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "Oppo"]
            dimension "default"
        }  //oppo
        vivo {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "Vivo"]
            dimension "default"
        }  //vivo
        xiaomi {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "XiaoMi"]
            dimension "default"
        }  //小米
        wandoujia {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "WanDouJia"]
            dimension "default"
        }  //豌豆荚
        B91 {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "91"]
            dimension "default"
        }  //91助手
        AnZhuo {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "AnZhuo"]
            dimension "default"
        }  //安卓市场
        AnZhi {
            manifestPlaceholders = [BUGLY_CHANNEL_VALUE: "AnZhi"]
            dimension "default"
        }  //安智市场
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [BUGLY_CHANNEL_VALUE: name]
    }
}

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':baselibrary')
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.4.0'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    // ButterKnife注解库：https://github.com/JakeWharton/butterknife
    implementation "com.jakewharton:butterknife:$rootProject.ext.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butterknifeVersion"
    // 状态栏沉浸：https://github.com/gyf-dev/ImmersionBar
    implementation 'com.gyf.barlibrary:barlibrary:2.3.0'
    // 侧滑功能：https://github.com/bingoogolapple/BGASwipeBackLayout-Android
    implementation 'cn.bingoogolapple:bga-swipebacklayout:1.1.9@aar'
    // 权限请求框架：https://github.com/getActivity/XXPermissions
    implementation 'com.hjq:xxpermissions:5.2'
    // 标题栏：https://github.com/getActivity/TitleBar
    implementation 'com.hjq:titlebar:3.2'
    // 吐司工具类：https://github.com/getActivity/ToastUtils
    implementation 'com.hjq:toast:2.5'
    // 圆形的ImageView：https://github.com/hdodenhof/CircleImageView
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'//版本随意
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.4'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.4'//没有使用特殊Header，可以不加这行
    //Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    implementation 'com.github.mmin18:realtimeblurview:1.0.6'
    //高德
    implementation files('libs/AMap_Location_V4.2.0_20180809.jar')
    //轮播图
    implementation 'com.youth.banner:banner:1.4.9'
    //版本更新
    implementation 'com.liulishuo.filedownloader:library:1.6.8'

}

repositories {
    flatDir {
        dirs 'libs' //就是你放aar的目录地址
    }
}